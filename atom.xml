<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ymkiux</title>
  
  
  <link href="https://ymkiux.github.io/atom.xml" rel="self"/>
  
  <link href="https://ymkiux.github.io/"/>
  <updated>2025-06-28T02:30:54.113Z</updated>
  <id>https://ymkiux.github.io/</id>
  
  <author>
    <name>Ymkiux</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何在Electron中读取Windows注册表并获取鼠标光标大小</title>
    <link href="https://ymkiux.github.io/posts/2024062121/"/>
    <id>https://ymkiux.github.io/posts/2024062121/</id>
    <published>2024-06-21T13:20:53.000Z</published>
    <updated>2025-06-28T02:30:54.113Z</updated>
    
    <content type="html"><![CDATA[<p>介绍了如何使用regedit包在Electron中读取注册表<span id="more"></span></p><h4 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h4><p>在某些场景下，应用程序需要读取系统配置，例如当前用户的鼠标光标大小 这些信息存储在Windows注册表中，但直接访问和读取这些信息可能存在一些挑战</p><h4 id="目录列表"><a href="#目录列表" class="headerlink" title="目录列表"></a>目录列表</h4><ol><li><strong>HKLM = HKEY_LOCAL_MACHINE</strong>：是机器软硬件信息的集散地</li><li><strong>HKCU = HKEY_CURRENT_USER</strong>：是当前用户所用信息储存地</li><li><strong>HKEY_CLASSES_ROOT</strong>：文件关联相关信息</li><li><strong>HKEY_USERS</strong>：所有用户信息</li><li><strong>HKEY_CURRENT_CONFIG</strong>：当前系统配置</li></ol><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>为了解决这个问题，我选择使用<code>regedit</code>包，这是一个用于Node.js环境下访问Windows注册表的工具 首先，需要在Electron项目中安装<code>regedit</code>包</p><ol><li><strong>安装<code>regedit</code>包</strong></li></ol><p>在<code>package.json</code>文件中添加依赖：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;regedit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后运行<code>npm install</code>命令安装依赖</p><ol start="2"><li><strong>读取注册表中的鼠标光标大小</strong></li></ol><p>以下是一个示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regedit = <span class="built_in">require</span>(<span class="string">&#x27;regedit&#x27;</span>);</span><br><span class="line">regedit.<span class="title function_">list</span>([<span class="string">&#x27;HKCU\\Control Panel\\Cursors&#x27;</span>])</span><br><span class="line">  .<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">entry</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> cursorSettings = entry.<span class="property">data</span>.<span class="property">values</span></span><br><span class="line">    <span class="keyword">if</span> (cursorSettings[<span class="string">&#x27;CursorBaseSize&#x27;</span>]) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;CursorBaseSize: &#x27;</span> + cursorSettings[<span class="string">&#x27;CursorBaseSize&#x27;</span>].<span class="property">value</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;CursorBaseSize not found in the registry&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="例外场景"><a href="#例外场景" class="headerlink" title="例外场景"></a>例外场景</h4><p>在实际使用过程中，可能会遇到一些例外情况，例如：</p><ul><li><code>CursorBaseSize</code>项在注册表中不存在</li><li>读取注册表的过程中发生权限问题或其他错误</li></ul><p>为了处理这些情况，可以在代码中添加错误处理和默认值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regedit = <span class="built_in">require</span>(<span class="string">&#x27;regedit&#x27;</span>);</span><br><span class="line"></span><br><span class="line">regedit.<span class="title function_">list</span>([<span class="string">&#x27;HKCU\\Control Panel\\Cursors&#x27;</span>])</span><br><span class="line">  .<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">entry</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> cursorSettings = entry.<span class="property">data</span>.<span class="property">values</span></span><br><span class="line">      <span class="keyword">if</span> (cursorSettings[<span class="string">&#x27;CursorBaseSize&#x27;</span>]) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;CursorBaseSize: &#x27;</span> + cursorSettings[<span class="string">&#x27;CursorBaseSize&#x27;</span>].<span class="property">value</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;CursorBaseSize not found in the registry&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error reading the registry: &#x27;</span>, error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error accessing the registry: &#x27;</span>, error)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>通过使用<code>regedit</code>包，我可以在Electron应用中方便地读取Windows注册表中的信息【也可以查询注册表其他键值功能】</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;介绍了如何使用regedit包在Electron中读取注册表</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Ts/Js 机巧收藏篇</title>
    <link href="https://ymkiux.github.io/posts/2023051823/"/>
    <id>https://ymkiux.github.io/posts/2023051823/</id>
    <published>2023-05-18T15:43:00.000Z</published>
    <updated>2025-06-28T02:30:53.997Z</updated>
    
    <content type="html"><![CDATA[<p>记录其 Ts/Js 通用技巧<span id="more"></span></p><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><h5 id="扩展全局作用域"><a href="#扩展全局作用域" class="headerlink" title="扩展全局作用域"></a><strong>扩展全局作用域</strong></h5><ul><li>使用 <code>declare global</code> </li></ul><h5 id="合并数组和对象"><a href="#合并数组和对象" class="headerlink" title="合并数组和对象"></a><strong>合并数组和对象</strong></h5><ul><li>数组对象可以使用数组的<code>concat</code>方法或者扩展运算符<code>...</code>来合并</li><li>普通对象可以使用对象的<code>assign</code>方法或者扩展运算符<code>...</code>来合并</li></ul><h5 id="删除-Json-中不想要的字段和值"><a href="#删除-Json-中不想要的字段和值" class="headerlink" title="删除 Json 中不想要的字段和值"></a><strong>删除 Json 中不想要的字段和值</strong></h5><ul><li>使用<code>delete</code>操作符</li></ul><h5 id="数组内实现删除-插入-保留等逻辑"><a href="#数组内实现删除-插入-保留等逻辑" class="headerlink" title="数组内实现删除/插入/保留等逻辑"></a><strong>数组内实现删除/插入/保留等逻辑</strong></h5><ul><li>删除指定下标对象： arr.splice(index,1)</li><li>在指定下标插入对象： arr.splice(index, 0, 对象)</li><li>在指定下标替换对象： arr.splice(index, 1, 对象)</li><li>保留多少个对象： arr.splice(个数)</li></ul><h5 id="属性映射和类型约束"><a href="#属性映射和类型约束" class="headerlink" title="属性映射和类型约束"></a><strong>属性映射和类型约束</strong></h5><ul><li>Record</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> petsGroup = <span class="string">&quot;dog&quot;</span> | <span class="string">&quot;cat&quot;</span> | <span class="string">&quot;fish&quot;</span>;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IPetInfo</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IPets</span> = <span class="title class_">Record</span>&lt;petsGroup, <span class="title class_">IPetInfo</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Animal</span> = <span class="string">&quot;Dog&quot;</span> | <span class="string">&quot;Cat&quot;</span> | <span class="string">&quot;Bird&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">animalContent</span>: <span class="title class_">Record</span>&lt;<span class="title class_">Animal</span>, <span class="variable constant_">JSX</span>.<span class="property">Element</span>&gt; = &#123;</span><br><span class="line">  <span class="title class_">Dog</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Dog is loyal and friendly.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">  <span class="title class_">Cat</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Cat is cute and independent.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">  <span class="title class_">Bird</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Bird is colorful and free.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAnimalContent</span>(<span class="params"><span class="attr">animal</span>: <span class="title class_">Animal</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> animalContent[animal];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="帧率显示"><a href="#帧率显示" class="headerlink" title="帧率显示"></a><strong>帧率显示</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">let last = Date.now();</span><br><span class="line">let ticks = 0;</span><br><span class="line">function rafLoop(timestamp) &#123;</span><br><span class="line">    ticks += 1;</span><br><span class="line">    if (ticks &gt;= 30) &#123;</span><br><span class="line">        const now = Date.now();</span><br><span class="line">        const diff = now - last</span><br><span class="line">        const fps = Math.round(1000 / (diff / ticks));</span><br><span class="line">        last = now</span><br><span class="line">        ticks = 0</span><br><span class="line">        renderFps(fps)</span><br><span class="line">    &#125;</span><br><span class="line">    requestAnimationFrame(rafLoop);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">let fpsEl = document.getElementById(&#x27;fps&#x27;);</span><br><span class="line">function renderFps(fps) &#123;</span><br><span class="line">    fpsEl.textContent = fps;</span><br><span class="line">&#125;</span><br><span class="line"> rafLoop();</span><br></pre></td></tr></table></figure><h5 id="异步逻辑"><a href="#异步逻辑" class="headerlink" title="异步逻辑"></a><strong>异步逻辑</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">return new Promise((resolve) =&gt; &#123;</span><br><span class="line">    resolve(1);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录其 Ts/Js 通用技巧</summary>
    
    
    
    
    <category term="typescript" scheme="https://ymkiux.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>如何解决electron build、TypeScript和axios的常见问题</title>
    <link href="https://ymkiux.github.io/posts/2023041420/"/>
    <id>https://ymkiux.github.io/posts/2023041420/</id>
    <published>2023-04-14T12:57:00.000Z</published>
    <updated>2025-06-28T02:30:54.122Z</updated>
    
    <content type="html"><![CDATA[<p>介绍了其中三方面的原因和解决方法<span id="more"></span></p><h3 id="electron-build"><a href="#electron-build" class="headerlink" title="electron-build"></a>electron-build</h3><h4 id="download-failed"><a href="#download-failed" class="headerlink" title="download failed"></a>download failed</h4><h5 id="相关原因"><a href="#相关原因" class="headerlink" title="相关原因"></a>相关原因</h5><blockquote><p>由于国内网络环境的原因，有时候下载速度会非常慢，甚至导致超时或失败</p></blockquote><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><ul><li>使用淘宝镜像源来加速下载<div class="tag-plugin copy"><input class="copy-area" readonly id="copy_1" value="ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/"><button class="copy-btn" onclick="util.copy(&quot;copy_1&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div></li><li>使用全局代理</li></ul><h5 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h5><ul><li><a href="https://www.npmjs.com/package/electron-builder">electron-builder - npm</a></li><li><a href="https://npm.taobao.org/">淘宝 NPM 镜像</a></li><li><a href="https://www.electronjs.org/">Electron | Build cross-platform desktop apps with JavaScript, HTML, and CSS.</a></li></ul><h4 id="Cannot-spawn-app-builder-exe-Error-spawn-UNKNOWN"><a href="#Cannot-spawn-app-builder-exe-Error-spawn-UNKNOWN" class="headerlink" title="Cannot spawn app-builder.exe: Error: spawn UNKNOWN"></a>Cannot spawn app-builder.exe: Error: spawn UNKNOWN</h4><h5 id="相关原因-1"><a href="#相关原因-1" class="headerlink" title="相关原因"></a>相关原因</h5><blockquote><p>pnpm可能会导致一些原生模块没有被正确载入</p></blockquote><h5 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h5><p>[任选其一]</p><ul><li>开启全局节点模式[推荐]<br>下载速度可正常观看YouTube即可</li><li>下载指定版本<a href="https://github.com/electron/electron/tags">electron-build</a>[推荐]<br>移动至C:\xxx\AppData\Local\electron\Cache<table><thead><tr><th>版本号</th><th>链接</th></tr></thead><tbody><tr><td>23.2.3</td><td><a href="https://github.com/electron/electron/releases/download/v23.2.3/electron-v23.2.3-win32-x64.zip">23.2.3-win32-x64.zip</a></td></tr><tr><td>23.2.4</td><td><a href="https://github.com/electron/electron/releases/download/v23.2.4/electron-v23.2.4-win32-x64.zip">23.2.4-win32-x64.zip</a></td></tr><tr><td>24.1.2</td><td><a href="https://github.com/electron/electron/releases/download/v24.1.2/electron-v24.1.2-win32-x64.zip">24.1.2-win32-x64.zip</a></td></tr><tr><td>25.0.0-alpha.3</td><td><a href="https://github.com/electron/electron/releases/download/v25.0.0-alpha.3/electron-v25.0.0-alpha.3-win32-x64.zip">25.0.0-alpha.3-win32-x64.zip</a></td></tr><tr><td>25.0.0-alpha.4</td><td><a href="https://github.com/electron/electron/releases/download/v25.0.0-alpha.4/electron-v25.0.0-alpha.4-win32-x64.zip">25.0.0-alpha.4-win32-x64.zip</a></td></tr></tbody></table></li></ul><h4 id="FATAL-ERROR-Ineffective-mark-compacts-near-heap-limit-Allocation-failed-JavaScript-heap-out-of-memory-in-Ionic-3"><a href="#FATAL-ERROR-Ineffective-mark-compacts-near-heap-limit-Allocation-failed-JavaScript-heap-out-of-memory-in-Ionic-3" class="headerlink" title="FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory in Ionic 3"></a>FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory in Ionic 3</h4><h5 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h5><div class="tag-plugin copy"><input class="copy-area" readonly id="copy_2" value="export NODE_OPTIONS=--max-old-space-size=8192"><button class="copy-btn" onclick="util.copy(&quot;copy_2&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><h3 id="TypeScript-错误：类型Window上不存在属性X问题"><a href="#TypeScript-错误：类型Window上不存在属性X问题" class="headerlink" title="TypeScript 错误：类型Window上不存在属性X问题"></a>TypeScript 错误：类型<code>Window</code>上不存在属性X问题</h3><p>TypeScript是一种静态类型检查的编程语言，它可以在编译时发现并报告潜在的错误。但是有时候，当我们使用一些第三方库或者自定义的全局变量时，TypeScript会提示类型“Window”上不存在属性“X”的错误，这是因为TypeScript无法识别这些属性</p><h4 id="解决方法-3"><a href="#解决方法-3" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li>使用类型断言来告诉TypeScript，我们知道这个属性是存在的，只需要在属性前加上<code>(&lt;any&gt;window)</code>即可。例如，如果我们要使用一个名为<code>myVar</code>的全局变量，我们可以这样写：<code>(&lt;any&gt;window).myVar</code></li><li>使用声明合并来扩展Window接口，添加我们需要的属性。只需要在一个.ts文件中写上如下代码即可：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">    <span class="attr">myVar</span>: <span class="built_in">any</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考文档-1"><a href="#参考文档-1" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="https://www.typescriptlang.org/docs/handbook/basic-types.html#type-assertions">TypeScript: Handbook - Basic Types</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html">TypeScript: Handbook - Declaration Merging</a></li></ul><h3 id="axios-timeout-of-5000ms-exceeded超时问题如何解决"><a href="#axios-timeout-of-5000ms-exceeded超时问题如何解决" class="headerlink" title="axios: timeout of 5000ms exceeded超时问题如何解决"></a>axios: timeout of 5000ms exceeded超时问题如何解决</h3><p>axios是一个基于Promise的HTTP客户端，它可以在浏览器和Node.js中使用。它有一个默认的超时时间为5000毫秒，也就是说如果请求在5秒内没有响应，就会抛出一个错误：”timeout of 5000ms exceeded”</p><h4 id="解决方法-4"><a href="#解决方法-4" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li>增加超时时间，可以在创建axios实例时设置<code>timeout</code>选项，也可以在发送请求时设置<code>timeout</code>参数。例如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">10000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">10000</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>捕获并处理错误，可以使用<code>catch</code>方法或者<code>try...catch</code>语句来捕获错误，并根据具体情况进行处理。例如，可以重试请求，或者提示用户检查网络连接。例如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理响应数据</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">code</span> === <span class="string">&#x27;ECONNABORTED&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求超时，请重试&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 其他错误</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用try...catch语句捕获错误</span></span><br><span class="line">(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line">    <span class="comment">// 处理响应数据</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">code</span> === <span class="string">&#x27;ECONNABORTED&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 超时错误</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求超时，请重试&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 其他错误</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h4 id="参考文档-2"><a href="#参考文档-2" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="https://www.npmjs.com/package/axios">Axios - npm</a></li><li><a href="https://axios-http.com/docs/handling_errors">Handling Errors | Axios</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch">Promise.prototype.catch() - JavaScript | MDN</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch">try…catch - JavaScript | MDN</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;介绍了其中三方面的原因和解决方法</summary>
    
    
    
    
    <category term="electron" scheme="https://ymkiux.github.io/tags/electron/"/>
    
    <category term="typescript" scheme="https://ymkiux.github.io/tags/typescript/"/>
    
    <category term="axios" scheme="https://ymkiux.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>electron中的cmd命令执行和监听</title>
    <link href="https://ymkiux.github.io/posts/2023041123/"/>
    <id>https://ymkiux.github.io/posts/2023041123/</id>
    <published>2023-04-11T15:58:00.000Z</published>
    <updated>2025-06-28T02:30:54.006Z</updated>
    
    <content type="html"><![CDATA[<p>监听CMD命令: 成功、失败、执行结束<span id="more"></span></p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>执行系统操作，或者启动其他进程。这时候，我们就需要能够监听CMD命令的执行结果，以便根据不同的情况做出相应的处理</p><h4 id="需求目的"><a href="#需求目的" class="headerlink" title="需求目的"></a>需求目的</h4><p>能够执行任意的CMD命令：</p><ul><li>获取其输出[正常/异常]</li><li>判断CMD命令是否执行成功</li></ul><h4 id="相关实现"><a href="#相关实现" class="headerlink" title="相关实现"></a>相关实现</h4><p>利用Node.js提供的<code>child_process</code>模块创建一个带有标准输入输出流的子进程，使用<code>spawn</code>方法来执行CMD命令，例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入child_process模块</span></span><br><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行ping命令</span></span><br><span class="line"><span class="keyword">const</span> child = <span class="title function_">spawn</span>(<span class="string">&#x27;ping&#x27;</span>, [<span class="string">&#x27;www.baidu.com&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听子进程的标准输出流</span></span><br><span class="line">child.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听子进程的标准错误流</span></span><br><span class="line">child.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`stderr: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听子进程的退出事件</span></span><br><span class="line">child.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`child process exited with code <span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听子进程的错误事件</span></span><br><span class="line">child.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`child process error: <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="相关总结"><a href="#相关总结" class="headerlink" title="相关总结"></a>相关总结</h4><p>通过使用Node.js的<code>child_process</code>模块，可以监听其CMD命令成功、失败、执行结束等事件。命令执行流程控制还有其它的函数，具体的用法可以参考Node.js的官方文档</p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="https://www.electronjs.org/">Electron官网</a></li><li><a href="https://nodejs.org/api/child_process.html">Node.js child_process模块</a></li><li><a href="https://nodejs.org/api/child_process.html#child_process_class_childprocess">Node.js ChildProcess类</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;监听CMD命令: 成功、失败、执行结束</summary>
    
    
    
    
    <category term="electron" scheme="https://ymkiux.github.io/tags/electron/"/>
    
    <category term="node.js" scheme="https://ymkiux.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>electron和vue之间的通信实现</title>
    <link href="https://ymkiux.github.io/posts/2023040900/"/>
    <id>https://ymkiux.github.io/posts/2023040900/</id>
    <published>2023-04-08T16:02:00.000Z</published>
    <updated>2025-06-28T02:30:54.013Z</updated>
    
    <content type="html"><![CDATA[<p>如何在electron中使用vue进行通信<span id="more"></span></p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;electron是一个基于Node.js和Chromium的桌面应用开发框架，它可以让我们使用web技术来创建跨平台的桌面应用<br>&nbsp;&nbsp;vue是一个轻量级的前端框架，它可以让我们使用声明式的模板语法来构建用户界面。<br>&nbsp;&nbsp;如果想要在electron中使用vue来开发界面，那么我们就需要解决一个问题：如何在electron的主进程和渲染进程之间进行通信和执行相关的逻辑</p><h4 id="需求目的"><a href="#需求目的" class="headerlink" title="需求目的"></a>需求目的</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;electron的主进程和渲染进程之间是相互隔离的，它们不能直接访问对方的变量或函数。因此，我们需要一种ipc机制来实现它们之间的通信和协作</p><h4 id="相关实现"><a href="#相关实现" class="headerlink" title="相关实现"></a>相关实现</h4><ul><li>首先，在vue中引入ipcRenderer模块。例如:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ipc = electron.<span class="property">ipcRenderer</span>;</span><br></pre></td></tr></table></figure></li><li>其次，在主进程中引入ipcMain模块。由于主进程运行在Node.js环境中，我们可以直接使用import或者require方法来引入ipcMain模块。例如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ipcMain &#125; <span class="keyword">from</span> <span class="string">&#x27;electron&#x27;</span>;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">const</span> &#123; ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>然后，在渲染进程中向主进程发送消息或者监听主进程发送的消息。我们可以使用ipcRenderer.send方法来向主进程发送消息，并且指定一个channel作为消息类型；我们也可以使用ipcRenderer.on方法来监听主进程发送的消息，并且指定一个channel作为消息类型。例如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在渲染进程中向主进程发送消息</span></span><br><span class="line">ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;readFileDir&#x27;</span>, <span class="string">&#x27;Hello from vue&#x27;</span>);</span><br><span class="line"><span class="comment">// 在渲染进程中监听主进程发送的消息</span></span><br><span class="line">ipcRenderer.<span class="title function_">on</span>(<span class="string">&#x27;readFileDir_status&#x27;</span>, <span class="function">(<span class="params">event, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// dir from electron</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>接着，在主进程中接收或者发送消息。我们可以使用ipcMain.on方法来接收渲染进程发送的消息，并且指定一个channel作为消息类型；我们也可以使用event.reply方法来向发送消息的渲染进程回复消息，并且指定一个channel作为消息类型。例如：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在主进程中接收渲染进程发送的消息</span></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;readFileDir&#x27;</span>, <span class="function">(<span class="params">event, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// Hello from vue</span></span><br><span class="line">  <span class="comment">// 在主进程中向发送消息的渲染进程回复消息</span></span><br><span class="line">  event.<span class="title function_">reply</span>(<span class="string">&#x27;readFileDir_status&#x27;</span>, <span class="string">&#x27;dir from electron&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="相关结论"><a href="#相关结论" class="headerlink" title="相关结论"></a>相关结论</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;通信的核心原理是基于事件驱动的</p><h4 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h4><ul><li><a href="https://www.electronjs.org/docs/api/ipc-main">https://www.electronjs.org/docs/api/ipc-main</a></li><li><a href="https://www.electronjs.org/docs/api/ipc-renderer">https://www.electronjs.org/docs/api/ipc-renderer</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;如何在electron中使用vue进行通信</summary>
    
    
    
    
    <category term="electron" scheme="https://ymkiux.github.io/tags/electron/"/>
    
    <category term="vue" scheme="https://ymkiux.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>客户端保活最佳方案机制</title>
    <link href="https://ymkiux.github.io/posts/2021101220/"/>
    <id>https://ymkiux.github.io/posts/2021101220/</id>
    <published>2021-10-12T12:14:00.000Z</published>
    <updated>2025-06-28T02:30:54.161Z</updated>
    
    <content type="html"><![CDATA[<p>更优雅的利用系统机制保活<span id="more"></span></p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>一个云控脚本引擎</p><h4 id="需求目的"><a href="#需求目的" class="headerlink" title="需求目的"></a>需求目的</h4><p>需要让程序一直在后台运行保持不被系统杀死 避免让用户在使用过程中还需时刻盯着程序 造成不必要的繁琐问题 以达到配置好相关信息后只需提供设备电量 后续便可不用碰设备 实现远程云控效果</p><h4 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h4><ul><li>这年头还研究保活是想用户设备发热发烫么<br>嗯 从使用场景来看 对用户而言最重要的能够随时接收命令 愿意使用就相当于接受了这一缺点</li><li>双进程感觉挺靠谱的 有很多人也推这个保活机制<br>使用场景不同 对用户造成的观感会有很大差别</li></ul><h4 id="参考实现"><a href="#参考实现" class="headerlink" title="参考实现"></a>参考实现</h4><p>音乐类程序例如QQ音乐能一直在后台播放</p><h4 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h4><ul><li>代码区<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SilentMusicService</span> : <span class="type">Service</span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mMediaPlayer: MediaPlayer? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mAudioManager: AudioManager? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> notificationBuilder: NotificationCompat.Builder</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mAudioFocusChange: OnAudioFocusChangeListener =</span><br><span class="line">        <span class="keyword">object</span> : OnAudioFocusChangeListener &#123;</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAudioFocusChange</span><span class="params">(focusChange: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">                <span class="keyword">when</span> (focusChange) &#123;</span><br><span class="line">                    AudioManager.AUDIOFOCUS_GAIN -&gt; &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            startPlayMusic()</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">                            e.printStackTrace()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    AudioManager.AUDIOFOCUS_LOSS -&gt; &#123;</span><br><span class="line">                        mAudioManager!!.abandonAudioFocus(<span class="keyword">this</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBind</span><span class="params">(intent: <span class="type">Intent</span>)</span></span>: IBinder? &#123;</span><br><span class="line">        <span class="keyword">throw</span> UnsupportedOperationException(<span class="string">&quot;Not yet implemented&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresApi(Build.VERSION_CODES.O)</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStartCommand</span><span class="params">(intent: <span class="type">Intent</span>, flags: <span class="type">Int</span>, startId: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        NotificationUtils.notify(<span class="number">0</span>) &#123; param -&gt;</span><br><span class="line">            intent.putExtra(<span class="string">&quot;id&quot;</span>, <span class="number">0</span>)</span><br><span class="line">            notificationBuilder = param.setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">                .setContentText(R.string.this_is_a_running_foreground_process.toText())</span><br><span class="line">                .setAutoCancel(<span class="literal">false</span>)</span><br><span class="line">                .setOngoing(<span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        NotificationUtils.cancelAll()</span><br><span class="line">        startForeground(<span class="number">1</span>, notificationBuilder.notification)</span><br><span class="line">        mAudioManager = getSystemService(AUDIO_SERVICE) <span class="keyword">as</span> AudioManager</span><br><span class="line">        <span class="keyword">if</span> (mAudioManager != <span class="literal">null</span>) mAudioManager!!.requestAudioFocus(</span><br><span class="line">            mAudioFocusChange,</span><br><span class="line">            AudioManager.STREAM_MUSIC,</span><br><span class="line">            AudioManager.AUDIOFOCUS_GAIN</span><br><span class="line">        )</span><br><span class="line">        mMediaPlayer = MediaPlayer.create(applicationContext, R.raw.no_notice)</span><br><span class="line">        mMediaPlayer?.isLooping = <span class="literal">true</span></span><br><span class="line">        startPlayMusic()</span><br><span class="line">        <span class="keyword">return</span> START_STICKY</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">startPlayMusic</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mMediaPlayer != <span class="literal">null</span> &amp;&amp; !mMediaPlayer!!.isPlaying) &#123;</span><br><span class="line">            mMediaPlayer!!.start()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">stopPlayMusic</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mMediaPlayer != <span class="literal">null</span>) &#123;</span><br><span class="line">            mMediaPlayer!!.stop()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy()</span><br><span class="line">        stopPlayMusic()</span><br><span class="line">        startService(Intent(<span class="keyword">this</span>, SilentMusicService::<span class="keyword">class</span>.java))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>清单区<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;.service.SilentMusicService&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:priority</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:process</span>=<span class="string">&quot;:musicService&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><table><thead><tr><th align="center"><strong>机型品牌</strong></th><th align="center"><strong>系统版本</strong></th><th align="center"><strong>成果</strong></th></tr></thead><tbody><tr><td align="center"><strong>HUAWEI</strong></td><td align="center"><strong>7.0 8.1 9.0</strong></td><td align="center"><strong>可长时间运转完成任务</strong></td></tr><tr><td align="center"><strong>Redmi</strong></td><td align="center"><strong>9.0 10 11</strong></td><td align="center"><strong>可长时间运转完成任务(10以上添加另外的保活配置)</strong></td></tr><tr><td align="center"><strong>Vivo、OPPO</strong></td><td align="center"><strong>10</strong></td><td align="center"><strong>可长时间运转完成任务(测试次数过少)</strong></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;更优雅的利用系统机制保活</summary>
    
    
    
    <category term="Android开发游记" scheme="https://ymkiux.github.io/categories/Android%E5%BC%80%E5%8F%91%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="android" scheme="https://ymkiux.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>实现一个控件内多处可点击事件</title>
    <link href="https://ymkiux.github.io/posts/2021051013/"/>
    <id>https://ymkiux.github.io/posts/2021051013/</id>
    <published>2021-05-10T05:45:00.000Z</published>
    <updated>2025-06-28T02:30:54.132Z</updated>
    
    <content type="html"><![CDATA[<p>轻松处理一个控件内多处点击事件<span id="more"></span></p><h4 id="背景需求"><a href="#背景需求" class="headerlink" title="背景需求"></a>背景需求</h4><p>需要在一个TextView控件内存在两个可点击的事件</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>利用SpannableString实现 重写其updateDrawState方法为false即可</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>先创建SpannableString并使用其Message信息完整范围内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpannableString spannableString = new SpannableString(msg);</span><br></pre></td></tr></table></figure><p>创建点击事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ClickableSpan userServiceAgreementClick = new ClickableSpan() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View widget) &#123;</span><br><span class="line">               //dowork</span><br><span class="line">            &#125;</span><br><span class="line">            //当前方法重写取消下划线</span><br><span class="line">            @Override</span><br><span class="line">            public void updateDrawState(@NonNull TextPaint ds) &#123;</span><br><span class="line">                ds.setColor(ds.linkColor);</span><br><span class="line">                ds.setUnderlineText(false);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>配置点击事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param userServiceAgreementFirst 指定内容开始下标</span><br><span class="line"> * @param userServiceAgreementLast 指定内容结束下标                                </span><br><span class="line">*/</span><br><span class="line">spannableString.setSpan(userServiceAgreementClick, privacyPolicyFirst, privacyPolicyLast, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br></pre></td></tr></table></figure><p>配置颜色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spannableString.setSpan(new ForegroundColorSpan(ContextCompat.getColor(getContext(), R.color.public_color_0289FF)), userServiceAgreementFirst, userServiceAgreementLast, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br></pre></td></tr></table></figure><p>最后配置效果以及内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param firstUserXyContext TextView控件实参</span><br><span class="line"> * @param setHighlightColor 设置点击效果为透明</span><br><span class="line"> * @param setMovementMethod 点击的时候产生超链接</span><br><span class="line">*/</span><br><span class="line"> firstUserXyContext.setHighlightColor(Color.TRANSPARENT);</span><br><span class="line"> firstUserXyContext.setText(spannableString);</span><br><span class="line"> firstUserXyContext.setMovementMethod(LinkMovementMethod.getInstance());</span><br></pre></td></tr></table></figure><p>最终收获<br>SpannableString只允许先设置点击事件然后才能设置色值 否则无效</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;轻松处理一个控件内多处点击事件</summary>
    
    
    
    <category term="Android开发游记" scheme="https://ymkiux.github.io/categories/Android%E5%BC%80%E5%8F%91%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="android" scheme="https://ymkiux.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>项目初次提交至github过程</title>
    <link href="https://ymkiux.github.io/posts/2021012714/"/>
    <id>https://ymkiux.github.io/posts/2021012714/</id>
    <published>2021-01-27T06:08:00.000Z</published>
    <updated>2025-06-28T02:30:54.264Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录备用<span id="more"></span></p><h4 id="创建本地"><a href="#创建本地" class="headerlink" title="创建本地"></a>创建本地</h4><ul><li>初始化一个空的git仓库<div class="tag-plugin copy"><input class="copy-area" readonly id="copy_3" value="git init"><button class="copy-btn" onclick="util.copy(&quot;copy_3&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div></li><li>将所有文件添加到暂存区<div class="tag-plugin copy"><input class="copy-area" readonly id="copy_4" value="git add ."><button class="copy-btn" onclick="util.copy(&quot;copy_4&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div></li><li>将暂存区的文件提交到本地仓库<div class="tag-plugin copy"><input class="copy-area" readonly id="copy_5" value="git commit -m first commit"><button class="copy-btn" onclick="util.copy(&quot;copy_5&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div></li></ul><h4 id="创建远程"><a href="#创建远程" class="headerlink" title="创建远程"></a>创建远程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;ymkiux&quot;</span><br><span class="line">git config --global user.email &quot;3255284101@qq.com&quot;</span><br></pre></td></tr></table></figure><ul><li>配置链接ssh<div class="tag-plugin copy"><input class="copy-area" readonly id="copy_6" value="ssh-keygen -t rsa -C 3255284101@qq.com"><button class="copy-btn" onclick="util.copy(&quot;copy_6&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div></li><li>获取当前生成的ssh<div class="tag-plugin copy"><input class="copy-area" readonly id="copy_7" value="clip < ~/.ssh/id_rsa.pub"><button class="copy-btn" onclick="util.copy(&quot;copy_7&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div></li></ul><h4 id="关联仓库"><a href="#关联仓库" class="headerlink" title="关联仓库"></a>关联仓库</h4><ul><li>将本地仓库和远程仓库关联起来<div class="tag-plugin copy"><input class="copy-area" readonly id="copy_8" value="git remote add origin git@github.com:ymkiux/cdn.git"><button class="copy-btn" onclick="util.copy(&quot;copy_8&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div></li><li>查看当前的远程仓库地址<div class="tag-plugin copy"><input class="copy-area" readonly id="copy_9" value="git remote -v"><button class="copy-btn" onclick="util.copy(&quot;copy_9&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div></li></ul><h4 id="本地-gt-远程"><a href="#本地-gt-远程" class="headerlink" title="本地=&gt;远程"></a>本地=&gt;远程</h4><ul><li>推送到远程仓库<div class="tag-plugin copy"><input class="copy-area" readonly id="copy_10" value="git push -u origin master"><button class="copy-btn" onclick="util.copy(&quot;copy_10&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div></li><li>刷新github网站上的仓库页面即可看到效果</li></ul><h4 id="使用branch管理不同product"><a href="#使用branch管理不同product" class="headerlink" title="使用branch管理不同product"></a>使用branch管理不同product</h4><ul><li><p>创建副分支</p><div class="tag-plugin copy"><input class="copy-area" readonly id="copy_11" value="git checkout --orphan 副分支名"><button class="copy-btn" onclick="util.copy(&quot;copy_11&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div></li><li><p>copy项目到当前路径下然后推送</p><div class="tag-plugin copy"><input class="copy-area" readonly id="copy_12" value="git add ."><button class="copy-btn" onclick="util.copy(&quot;copy_12&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><div class="tag-plugin copy"><input class="copy-area" readonly id="copy_13" value="git commit -m 描述"><button class="copy-btn" onclick="util.copy(&quot;copy_13&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><div class="tag-plugin copy"><input class="copy-area" readonly id="copy_14" value="git push origin 副分支名"><button class="copy-btn" onclick="util.copy(&quot;copy_14&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div></li></ul><h4 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h4><h5 id="1-fatal-remote-origin-already-exists"><a href="#1-fatal-remote-origin-already-exists" class="headerlink" title="1.fatal: remote origin already exists"></a>1.fatal: remote origin already exists</h5><ul><li>移除再重新关联库即可<div class="tag-plugin copy"><input class="copy-area" readonly id="copy_15" value="git remote rm origin"><button class="copy-btn" onclick="util.copy(&quot;copy_15&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><br>2.git push错误failed to push some refs to</li><li>本地远程异同<div class="tag-plugin copy"><input class="copy-area" readonly id="copy_16" value="git pull --rebase origin master"><button class="copy-btn" onclick="util.copy(&quot;copy_16&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><br>3.could not open directory ‘lib/wrapper/****services/‘: Filename too long<div class="tag-plugin copy"><input class="copy-area" readonly id="copy_17" value="git config --system core.longpaths true"><button class="copy-btn" onclick="util.copy(&quot;copy_17&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div></li></ul><h5 id="2-fatal-sha1-file-‘‘-write-error-Broken-pipe"><a href="#2-fatal-sha1-file-‘‘-write-error-Broken-pipe" class="headerlink" title="2.fatal: sha1 file ‘‘ write error: Broken pipe"></a>2.fatal: sha1 file ‘<stdout>‘ write error: Broken pipe</h5><ul><li>git config –global http.postBuffer 15728640000</li></ul><h5 id="3-ssh-connect-to-host-github-com-port-22-Connection-timed-out"><a href="#3-ssh-connect-to-host-github-com-port-22-Connection-timed-out" class="headerlink" title="3.ssh:connect to host github.com port 22: Connection timed out"></a>3.ssh:connect to host github.com port 22: Connection timed out</h5><ul><li><p>需要在 <code>~/.ssh/config</code> 文件中覆盖 SSH 设置。使用以下命令编辑该文件：</p> <div class="tag-plugin copy"><input class="copy-area" readonly id="copy_18" value="vim ~/.ssh/config"><button class="copy-btn" onclick="util.copy(&quot;copy_18&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div></li><li><p>在文件中添加以下内容：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Add section below to it</span></span><br><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure></li><li><p>保存并关闭文件。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">:w        保存文件但不退出vim</span><br><span class="line">:w file   将修改另外保存到file中，不退出vim</span><br><span class="line">:w!       强制保存，不退出vim</span><br><span class="line">:wq       保存文件并退出vim</span><br><span class="line">:wq!      强制保存文件，并退出vim</span><br><span class="line">:q        不保存文件，退出vim</span><br><span class="line">:q!       不保存文件，强制退出vim</span><br><span class="line">:e!       放弃所有修改，从上次保存文件开始再编辑命令历史</span><br></pre></td></tr></table></figure></li><li><p>最后，再次尝试使用以下命令进行 SSH 连接：</p> <div class="tag-plugin copy"><input class="copy-area" readonly id="copy_19" value="ssh -T git@github.com"><button class="copy-btn" onclick="util.copy(&quot;copy_19&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><h5 id="4-Failed-to-connect-to-github-com-port-443-after-21082-ms-Timed-out"><a href="#4-Failed-to-connect-to-github-com-port-443-after-21082-ms-Timed-out" class="headerlink" title="4.Failed to connect to github.com port 443 after 21082 ms: Timed out"></a>4.Failed to connect to github.com port 443 after 21082 ms: Timed out</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="variable language_">global</span> http.<span class="property">proxy</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:port</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单记录备用</summary>
    
    
    
    <category term="实用教程" scheme="https://ymkiux.github.io/categories/%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="git" scheme="https://ymkiux.github.io/tags/git/"/>
    
    <category term="github" scheme="https://ymkiux.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>hexo本地运行端口冲突的解决方法</title>
    <link href="https://ymkiux.github.io/posts/2021011016/"/>
    <id>https://ymkiux.github.io/posts/2021011016/</id>
    <published>2021-01-10T08:50:00.000Z</published>
    <updated>2025-06-28T02:30:54.021Z</updated>
    
    <content type="html"><![CDATA[<p>FATAL Port 4000 has been used. Try other port instead.<span id="more"></span></p><h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><div class="tag-plugin note" ><div class="title">起因</div><div class="body"><p><img src=/img/202101101657/cause.png> 这里看到是端口4000被一个进程占用了</p></div></div><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><div class="tag-plugin note" ><div class="title">解决方法\n使用cmd命令行执行以下命令</div><div class="body"><p>1.获取端口对应进程信息 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano|findstr 4000</span><br></pre></td></tr></table></figure> 最后一列第一个便是该进程的进程号 2.通过进程号关闭该进程 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /PID 进程号 /f  </span><br></pre></td></tr></table></figure></p></div></div><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><div class="tag-plugin note" ><div class="title">起因及结果截图</div><div class="body"><img src=/img/202101101657/wholeCourse.png></div></div><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><div class="tag-plugin note" ><div class="title">总结</div><div class="body"><p>端口被占用&gt;找到关联进程号&gt;强制停止该进程 - netstat -ano|findstr 被占用的端口号 - taskkill /PID 以上命令获取到的进程号 /f</p></div></div><style>#起因,#方法,#结果,#总结{    display:none;}</style>]]></content>
    
    
    <summary type="html">&lt;p&gt;FATAL Port 4000 has been used. Try other port instead.</summary>
    
    
    
    <category term="Windows" scheme="https://ymkiux.github.io/categories/Windows/"/>
    
    
    <category term="hexo" scheme="https://ymkiux.github.io/tags/hexo/"/>
    
    <category term="Windows" scheme="https://ymkiux.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>全局Application实例使用及分析</title>
    <link href="https://ymkiux.github.io/posts/2020122822/"/>
    <id>https://ymkiux.github.io/posts/2020122822/</id>
    <published>2020-12-28T14:49:00.000Z</published>
    <updated>2025-06-28T02:30:54.070Z</updated>
    
    <content type="html"><![CDATA[<p>简单明了通过源码分析获取其Context对象实例<span id="more"></span></p><h4 id="思考-分析-解决"><a href="#思考-分析-解决" class="headerlink" title="思考-分析-解决"></a>思考-分析-解决</h4><p>通过<a href="http://kaedea.com/2017/04/09/android/global-accessing-context/#more">Kaede Akatsuki</a>的这篇文章了解到:</p><ul><li><code>Application</code>实例在<code>App</code>运行时，始终存在着。</li><li><code>ActivityThread</code>匿名类中存在其实例的值</li></ul><p>反射<code>Context</code>对象引用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Object activityThread = null;</span><br><span class="line">  try &#123;</span><br><span class="line">    Method method = Class .forName(&quot;android.app.ActivityThread&quot;) .getMethod(&quot;currentActivityThread&quot;);</span><br><span class="line">     method.setAccessible(true);</span><br><span class="line">     activityThread = method.invoke(null);</span><br><span class="line">   &#125; catch (final Exception e) &#123;</span><br><span class="line">     Log.w(TAG, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其反射对应方法内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@UnsupportedAppUsage</span><br><span class="line">public static ActivityThread currentActivityThread() &#123;</span><br><span class="line">     return sCurrentActivityThread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>emmm这里看了源码发现有两个可以直接反射出实例的方法</p><p>这里先给出源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@UnsupportedAppUsage</span><br><span class="line">public static Application currentApplication() &#123;</span><br><span class="line">   ActivityThread am = currentActivityThread();</span><br><span class="line">   return am != null ? am.mInitialApplication : null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到了没，这里已经将其<code>currentActivityThread方法返回值</code>转化为<code>Application</code>对象实例</p><p>那么问题看起来就简单多了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val method = Class.forName(&quot;android.app.ActivityThread&quot;)</span><br><span class="line">                    .getDeclaredMethod(&quot;currentApplication&quot;)</span><br><span class="line">context = method.invoke(null) as Application</span><br></pre></td></tr></table></figure><p>至于为什么不使用<code>try catch </code>两点</p><ul><li>正常状态不会抛出异常 调试才会一直抛出</li><li>try catch 一旦使用  catch错误类型须写全 否则无法识别</li></ul><p>比如这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">   val method =Class.forName(&quot;android.app.ActivityThread&quot;)</span><br><span class="line">                    .getDeclaredMethod(&quot;currentApplication&quot;)</span><br><span class="line">   context = method.invoke(null) as Application</span><br><span class="line">  &#125; catch (e: NoSuchMethodException) &#123;</span><br><span class="line">     e.printStackTrace()</span><br><span class="line"> &#125; catch (e: ClassNotFoundException) &#123;</span><br><span class="line">     e.printStackTrace()</span><br><span class="line"> &#125; catch (e: IllegalAccessException) &#123;</span><br><span class="line">     e.printStackTrace()</span><br><span class="line"> &#125; catch (e: InvocationTargetException) &#123;</span><br><span class="line">     e.printStackTrace()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那第二种方法呢? 嗯。直接看源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@UnsupportedAppUsage</span><br><span class="line">public ContextImpl getSystemContext() &#123;</span><br><span class="line">   synchronized (this) &#123;</span><br><span class="line">       if (mSystemContext == null) &#123;</span><br><span class="line">           mSystemContext = ContextImpl.createSystemContext(this);</span><br><span class="line">      &#125;</span><br><span class="line">      return mSystemContext;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这个方法为什么看起来好眼熟 但是不能用哦</p><p><code>ContextImpl</code>这个类是继承<code>Context</code>但是在<code>Android sdk</code>较低版本是未实现的类</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单明了通过源码分析获取其Context对象实例</summary>
    
    
    
    <category term="Android开发游记" scheme="https://ymkiux.github.io/categories/Android%E5%BC%80%E5%8F%91%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="android" scheme="https://ymkiux.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>封装AlertDialog自定义布局</title>
    <link href="https://ymkiux.github.io/posts/2020112817/"/>
    <id>https://ymkiux.github.io/posts/2020112817/</id>
    <published>2020-11-28T09:35:00.000Z</published>
    <updated>2025-06-28T02:30:54.171Z</updated>
    
    <content type="html"><![CDATA[<p>更轻松解决AlertDialog臃肿自定义实现<span id="more"></span></p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p style="border:1px solid #ccc">封装其view方法 通过自定义接口提供给接口使用者进行其相关逻辑的操作 果然接口几乎是万金油的存在</p><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fun showAlertDialog(id: Int, confirmCallback: ConfirmCallback): View &#123;</span><br><span class="line">        var show: AlertDialog? = null</span><br><span class="line">        val customizeDialog: AlertDialog.Builder = AlertDialog.Builder(context)</span><br><span class="line">        customizeDialog.setCancelable(false)</span><br><span class="line">        val infoview: View = LayoutInflater.from(context).inflate(</span><br><span class="line">            id,</span><br><span class="line">            null, false</span><br><span class="line">        )</span><br><span class="line">        customizeDialog.setView(infoview)</span><br><span class="line">        customizeDialog.setPositiveButton(</span><br><span class="line">            &quot;确定&quot;</span><br><span class="line">        ) &#123; dialog, which -&gt;</span><br><span class="line">            confirmCallback.doWork()</span><br><span class="line">            show!!.dismiss()</span><br><span class="line">        &#125;</span><br><span class="line">        show = customizeDialog.show()</span><br><span class="line">        return infoview</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="普通使用"><a href="#普通使用" class="headerlink" title="普通使用"></a>普通使用</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var id: EditText? = null</span><br><span class="line">val showCustomizeDialog = showAlertDialog(R.layout.iv_activity_user_shared_interface_activity_add_fragment,object : ConfirmCallback &#123;</span><br><span class="line">      override fun doWork() &#123;</span><br><span class="line"> if (id!!.text.isEmpty()) &#123;</span><br><span class="line">       Toast.makeText(this@MainActivity, &quot;内容为空&quot;,Toast.LENGTH_SHORT).show()</span><br><span class="line">       return</span><br><span class="line">     &#125;</span><br><span class="line"> Toast.makeText(this@MainActivity, &quot;测试成功&quot;, Toast.LENGTH_SHORT).show()</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br><span class="line">id = showCustomizeDialog.findViewById&lt;EditText&gt;(R.id.edit_iv_activity_user_shared_interface_activity_add_fragment_id)</span><br></pre></td></tr></table></figure><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><p>具体可访问<a href="https://github.com/ymkiux/tools/blob/master/library/src/main/java/com/github/tools/presenter/Tools.kt">Github</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;更轻松解决AlertDialog臃肿自定义实现</summary>
    
    
    
    <category term="Android开发游记" scheme="https://ymkiux.github.io/categories/Android%E5%BC%80%E5%8F%91%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="android" scheme="https://ymkiux.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>实现自定义倒计时View</title>
    <link href="https://ymkiux.github.io/posts/2020092918/"/>
    <id>https://ymkiux.github.io/posts/2020092918/</id>
    <published>2020-09-29T10:15:00.000Z</published>
    <updated>2025-06-28T02:30:54.153Z</updated>
    
    <content type="html"><![CDATA[<p>更优雅的让TextView实时显示预设倒计时场景<span id="more"></span></p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><ul style="text-align: justify"><li style="list-style: circle">项目后台接口已写好，而客户端发送验证码UI逻辑上需要实现类似于倒计时功能</li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="初步"><a href="#初步" class="headerlink" title="初步"></a>初步</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">while (time &gt; 0) &#123;</span><br><span class="line">      time--</span><br><span class="line">     print(&quot;还剩&quot;+ time + &quot;秒&quot;)</span><br><span class="line">   try &#123;</span><br><span class="line">      Thread.sleep(1000)</span><br><span class="line">     &#125; catch (e: InterruptedException) &#123;</span><br><span class="line">         e.printStackTrace()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h5><h6 id="通过Runnable实现"><a href="#通过Runnable实现" class="headerlink" title="通过Runnable实现"></a>通过Runnable实现</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implements Runnable</span><br></pre></td></tr></table></figure><h6 id="定义其运行标识以及设定时间"><a href="#定义其运行标识以及设定时间" class="headerlink" title="定义其运行标识以及设定时间"></a>定义其运行标识以及设定时间</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private boolean isRun;</span><br><span class="line">private int time=60;</span><br></pre></td></tr></table></figure><h6 id="开启及停止"><a href="#开启及停止" class="headerlink" title="开启及停止"></a>开启及停止</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void start() &#123;</span><br><span class="line">        this.isRun = true;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">public void stop() &#123;</span><br><span class="line">        this.isRun = false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="自减值"><a href="#自减值" class="headerlink" title="自减值"></a>自减值</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private void count() &#123;</span><br><span class="line">        time--;</span><br><span class="line">        if (time == 0) &#123;</span><br><span class="line">            stop();</span><br><span class="line">            this.setText(&quot;请重试&quot;);</span><br><span class="line">            time=60;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="run方法"><a href="#run方法" class="headerlink" title="run方法"></a>run方法</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void run() &#123;</span><br><span class="line">       count();</span><br><span class="line">       if (isRun) &#123;</span><br><span class="line">           this.setText(&quot;还剩&quot;+time+&quot;秒&quot;);</span><br><span class="line">           postDelayed(this, 1000);</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           removeCallbacks(this);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h6 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tv_fragment_business_settlement_send_verification_code.start()</span><br></pre></td></tr></table></figure><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><ul style="text-align: justify"><li style="list-style: circle">通过标识真假判断是否执行 若执行便自减至0止步 其变化的数量实时显示在自定义控件上 适用于发送验证码功能模块开发</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;更优雅的让TextView实时显示预设倒计时场景</summary>
    
    
    
    <category term="Android开发游记" scheme="https://ymkiux.github.io/categories/Android%E5%BC%80%E5%8F%91%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="android" scheme="https://ymkiux.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>自定义Adapter实现无限存余</title>
    <link href="https://ymkiux.github.io/posts/2020092523/"/>
    <id>https://ymkiux.github.io/posts/2020092523/</id>
    <published>2020-09-25T15:14:00.000Z</published>
    <updated>2025-06-28T02:30:54.236Z</updated>
    
    <content type="html"><![CDATA[<p>继承无限循环adapter 重写实现有限adapter<span id="more"></span></p><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><ul style="text-align: justify"><li style="list-style: circle">当前已存在符合当前需求的adapter</li></ul><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><ul style="text-align: justify"><li style="list-style: circle">当前存在的adapter为无限循环式 而当前需要显示的仅仅只是其中一部分数据信息  不想直接复制原先ViewHoloder以及onBindView内的数据</li></ul><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><ul style="text-align: justify"><li style="list-style: circle">重写getItemCount()以及onBindViewHolder方法</li></ul><ul style="text-align: justify"><li style="list-style: circle">原先ViewHolder类中通过泛型获取控件ID以及通过ID设置文字以及图片等功能</li></ul><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><h6 id="继承原适配器-重写方法"><a href="#继承原适配器-重写方法" class="headerlink" title="继承原适配器 重写方法"></a>继承原适配器 重写方法</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class MLiveAdapter extends LiveAdapter &#123;</span><br><span class="line">    private List&lt;live&gt; liveList;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onBindViewHolder(ViewHolder holder, int position) &#123;</span><br><span class="line">        live = liveList.get(position);</span><br><span class="line">        holder.setImageRes(R.id.iv_live_icon, live.getImageId());</span><br><span class="line">        //省略...</span><br><span class="line">        holder.setText(R.id.tv_live_trade_name, live.getTradeName());</span><br><span class="line">        holder.getView(R.id.l1_live_bg).setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View view) &#123;</span><br><span class="line">                //省略...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        super.onBindViewHolder(holder, position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MLiveAdapter(List&lt;live&gt; liveList) &#123;</span><br><span class="line">        super(liveList);</span><br><span class="line">        this.liveList = liveList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getItemCount() &#123;</span><br><span class="line">        return liveList.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="获取ID-设置文字以及图片"><a href="#获取ID-设置文字以及图片" class="headerlink" title="获取ID 设置文字以及图片"></a>获取ID 设置文字以及图片</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">protected static class ViewHolder extends RecyclerView.ViewHolder &#123;</span><br><span class="line">    ImageView image;</span><br><span class="line">    TextView TradeName;</span><br><span class="line">    LinearLayout liBg;</span><br><span class="line">    View mConvertView;</span><br><span class="line">    //省略...</span><br><span class="line">    SparseArray&lt;View&gt; mViews;</span><br><span class="line"></span><br><span class="line">    public ViewHolder(View view) &#123;</span><br><span class="line">        super(view);</span><br><span class="line">        //省略...</span><br><span class="line">        image = view.findViewById(R.id.iv_live_icon); </span><br><span class="line">        TradeName = view.findViewById(R.id.tv_live_trade_name);</span><br><span class="line">        liBg = view.findViewById(R.id.l1_live_bg);</span><br><span class="line">        mViews = new SparseArray&lt;View&gt;();</span><br><span class="line">        mConvertView=view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public &lt;T extends View&gt; T getView(int viewId) &#123;</span><br><span class="line">        View view = mViews.get(viewId);</span><br><span class="line">        if (view == null) &#123;</span><br><span class="line">            view = mConvertView.findViewById(viewId);</span><br><span class="line">            mViews.put(viewId, view);</span><br><span class="line">        &#125;</span><br><span class="line">        return (T) view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public ViewHolder setText(int viewId, String text) &#123;</span><br><span class="line">        TextView tv = getView(viewId);</span><br><span class="line">        tv.setText(text);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ViewHolder setImageRes(int viewID, int resId) &#123;</span><br><span class="line">        ImageView iv = getView(viewID);</span><br><span class="line">        iv.setImageResource(resId);</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h5><div style="border:1px solid #ccc"><ul style="text-align: justify"><li style="list-style: circle">泛型真的很强大</li></ul><ul style="text-align: justify"><li style="list-style: circle">SparseArray<E>类有着增删改查的功能</li></ul></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;继承无限循环adapter 重写实现有限adapter</summary>
    
    
    
    <category term="Android开发游记" scheme="https://ymkiux.github.io/categories/Android%E5%BC%80%E5%8F%91%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="android" scheme="https://ymkiux.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>系统剪贴板的标准式使用</title>
    <link href="https://ymkiux.github.io/posts/2020092317/"/>
    <id>https://ymkiux.github.io/posts/2020092317/</id>
    <published>2020-09-23T09:58:00.000Z</published>
    <updated>2025-06-28T02:30:54.218Z</updated>
    
    <content type="html"><![CDATA[<p>更便捷使用系统剪切板功能<span id="more"></span></p><h5 id="类解"><a href="#类解" class="headerlink" title="类解"></a>类解</h5><p><span style="border:1px solid #ccc">ClipboardManager： 表示一个剪贴板管理器</span><br><span style="border:1px solid #ccc">ClipData： 剪贴板中保存的所有剪贴数据集</span><br><span style="border:1px solid #ccc">ClipData.Item： 剪贴数据集中的一个数据条目</span></p><h5 id="复制内容"><a href="#复制内容" class="headerlink" title="复制内容"></a>复制内容</h5><p><span style="border:1px solid #ccc">内容为obj.toString()</span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val clipboard=requireActivity().getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager</span><br><span class="line">clipboard.text = obj.toString().trim(&#123; it &lt;= &#x27; &#x27; &#125;)</span><br><span class="line">val clipData = ClipData.newPlainText(null, obj.toString())</span><br><span class="line">clipboard.setPrimaryClip(clipData)</span><br></pre></td></tr></table></figure><h5 id="获取系统剪贴板内容"><a href="#获取系统剪贴板内容" class="headerlink" title="获取系统剪贴板内容"></a>获取系统剪贴板内容</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ClipboardManager manager = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);</span><br><span class="line">        if (manager != null) &#123;</span><br><span class="line">            if (manager.hasPrimaryClip() &amp;&amp; manager.getPrimaryClip().getItemCount() &gt; 0) &#123;</span><br><span class="line">                CharSequence charSequence_addedText = manager.getPrimaryClip().getItemAt(0).getText();</span><br><span class="line">                String addedTextString = String.valueOf(charSequence_addedText);</span><br><span class="line">                try &#123;</span><br><span class="line">                    JSONObject obj = new JSONObject(addedTextString);</span><br><span class="line">                    JSONArray scanner = obj.getJSONArray(&quot;scanner&quot;);</span><br><span class="line">                    StringBuffer stringBuffer_scanner = new StringBuffer();</span><br><span class="line">                    for (int i = 0; i &lt; scanner.length(); i++) &#123;</span><br><span class="line">                        String s = (String) scanner.get(i);</span><br><span class="line">                        stringBuffer_scanner.append(s);</span><br><span class="line">                    &#125;</span><br><span class="line">                    tvFragXsScanner.setText(stringBuffer_scanner.toString());</span><br><span class="line">                &#125; catch (JSONException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h5 id="清空剪贴板内容"><a href="#清空剪贴板内容" class="headerlink" title="清空剪贴板内容"></a>清空剪贴板内容</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ClipboardManager manager = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);</span><br><span class="line">        if (manager != null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                manager.setPrimaryClip(manager.getPrimaryClip());</span><br><span class="line">                manager.setText(null);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://developer.android.com/guide/topics/text/copy-paste?hl=zh-cn#java">Android官方文档复制和粘贴</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;更便捷使用系统剪切板功能</summary>
    
    
    
    <category term="Android开发游记" scheme="https://ymkiux.github.io/categories/Android%E5%BC%80%E5%8F%91%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="android" scheme="https://ymkiux.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>实现单个activity加载多个fragment</title>
    <link href="https://ymkiux.github.io/posts/2020091813/"/>
    <id>https://ymkiux.github.io/posts/2020091813/</id>
    <published>2020-09-18T05:42:00.000Z</published>
    <updated>2025-06-28T02:30:54.143Z</updated>
    
    <content type="html"><![CDATA[<p>更轻松以及简化activity使用<span id="more"></span></p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p><code>由另一个界面跳转到当前activity时,携带参数值用来判断本次跳转加载哪个碎片事件</code></p><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><p><code>这里通过intent传值</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val intent = Intent(this@SettingActivity, FeedbackActivity::class.java)</span><br><span class="line">                intent.putExtra(&quot;Fragment&quot;, 0)</span><br><span class="line">                startActivity(intent)</span><br><span class="line">                overridePendingTransition(0, 0)</span><br><span class="line">                finish()</span><br></pre></td></tr></table></figure><p><code>当前activity接收加载碎片事件</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private val userFeedbackFragment = UserFeedbackFragment()</span><br><span class="line">private val bugFeedbackFragment = BugFeedbackFragment()</span><br><span class="line">val intExtra = intent.getIntExtra(&quot;Fragment&quot;, 0)</span><br><span class="line">        when (intExtra) &#123;</span><br><span class="line">            0 -&gt; &#123;</span><br><span class="line">                supportFragmentManager</span><br><span class="line">                    .beginTransaction()</span><br><span class="line">                    .add(R.id.frag_feed, userFeedbackFragment, null)</span><br><span class="line">                    .commit()</span><br><span class="line">            &#125;</span><br><span class="line">            1 -&gt; &#123;</span><br><span class="line">                tv_feed_title.text = getString(R.string.bug_feedback)</span><br><span class="line">                supportFragmentManager</span><br><span class="line">                    .beginTransaction()</span><br><span class="line">                    .add(R.id.frag_feed, bugFeedbackFragment, null)</span><br><span class="line">                    .commit()</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p><code>通过intExtra接收值判断加载设定碎片的加载事件</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;更轻松以及简化activity使用</summary>
    
    
    
    <category term="Android开发游记" scheme="https://ymkiux.github.io/categories/Android%E5%BC%80%E5%8F%91%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="android" scheme="https://ymkiux.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>便捷式时间差零</title>
    <link href="https://ymkiux.github.io/posts/2020091615/"/>
    <id>https://ymkiux.github.io/posts/2020091615/</id>
    <published>2020-09-16T07:13:00.000Z</published>
    <updated>2025-06-28T02:30:54.059Z</updated>
    
    <content type="html"><![CDATA[<p>轻松解决时间差问题<span id="more"></span></p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p><code>项目需要显示发布的内容与当前时间差值</code></p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="当前时间"><a href="#当前时间" class="headerlink" title="当前时间"></a>当前时间</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @return 返回当前时间</span><br><span class="line"> */</span><br><span class="line">public String getTime() &#123;</span><br><span class="line">    Date date = new Date();</span><br><span class="line">    @SuppressLint(&quot;SimpleDateFormat&quot;) SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">    return dateFormat.format(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="旧版时间差"><a href="#旧版时间差" class="headerlink" title="旧版时间差"></a>旧版时间差</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 返回时间差</span><br><span class="line"> *</span><br><span class="line"> * @param currTime    当前时间</span><br><span class="line"> * @param releaseTime 接口获取的时间</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public String getTimeDifference(String currTime, String releaseTime) throws ParseException &#123;</span><br><span class="line">    DateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">    Date d1 = dateFormat.parse(currTime);</span><br><span class="line">    Date d2 = dateFormat.parse(releaseTime);</span><br><span class="line">    long diff = d1.getTime() - d2.getTime();</span><br><span class="line">    long days = diff / (1000 * 60 * 60 * 24);</span><br><span class="line">    long hours = (diff - days * (1000 * 60 * 60 * 24)) / (1000 * 60 * 60);</span><br><span class="line">    long minutes = (diff - days * (1000 * 60 * 60 * 24) - hours * (1000 * 60 * 60)) / (1000 * 60);</span><br><span class="line">    String s = days + &quot;天&quot; + hours + &quot;小时&quot; + minutes + &quot;分&quot;;</span><br><span class="line">    if (days != 0 &amp;&amp; hours != 0 &amp;&amp; minutes != 0) &#123;</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">    if (days != 0) &#123;</span><br><span class="line">        if (hours != 0) &#123;</span><br><span class="line">            if (minutes != 0) &#123;</span><br><span class="line">                return s;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return s.replace(minutes + &quot;分&quot;, &quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            s = s.replace(hours + &quot;小时&quot;, &quot;&quot;);</span><br><span class="line">            if (minutes != 0) &#123;</span><br><span class="line">                return s;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return s.replace(minutes + &quot;分&quot;, &quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        s = s.replace(days + &quot;天&quot;, &quot;&quot;);</span><br><span class="line">        if (hours != 0) &#123;</span><br><span class="line">            if (minutes != 0) &#123;</span><br><span class="line">                return s;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return s.replace(minutes + &quot;分&quot;, &quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            s = s.replace(hours + &quot;小时&quot;, &quot;&quot;);</span><br><span class="line">            if (minutes != 0) &#123;</span><br><span class="line">                return s;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return s.replace(minutes + &quot;分&quot;, &quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="新版时间差"><a href="#新版时间差" class="headerlink" title="新版时间差"></a>新版时间差</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 返回时间差</span><br><span class="line">     *</span><br><span class="line">     * @param currTime    当前时间</span><br><span class="line">     * @param releaseTime 接口获取的时间</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public String getTimeDifference(String currTime, String releaseTime) throws ParseException &#123;</span><br><span class="line">        DateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        Date d1 = dateFormat.parse(currTime);</span><br><span class="line">        Date d2 = dateFormat.parse(releaseTime);</span><br><span class="line">        long diff = d1.getTime() - d2.getTime();</span><br><span class="line">        long days = diff / (1000 * 60 * 60 * 24);</span><br><span class="line">        long hours = (diff - days * (1000 * 60 * 60 * 24)) / (1000 * 60 * 60);</span><br><span class="line">        long minutes = (diff - days * (1000 * 60 * 60 * 24) - hours * (1000 * 60 * 60)) / (1000 * 60);</span><br><span class="line">        String s = days + &quot;天&quot; + hours + &quot;小时&quot; + minutes + &quot;分&quot;;</span><br><span class="line">        if (days != 0 &amp;&amp; hours != 0 &amp;&amp; minutes != 0) &#123;</span><br><span class="line">            return s;</span><br><span class="line">        &#125;</span><br><span class="line">        if (days != 0) &#123;</span><br><span class="line">            return getTime(hours, minutes, s);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            s = s.replace(days + &quot;天&quot;, &quot;&quot;);</span><br><span class="line">            return getTime(hours, minutes, s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String getTime(long hours, long minutes, String s) &#123;</span><br><span class="line">        if (hours != 0) &#123;</span><br><span class="line">            if (minutes != 0) &#123;</span><br><span class="line">                return s;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return s.replace(minutes + &quot;分&quot;, &quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            s = s.replace(hours + &quot;小时&quot;, &quot;&quot;);</span><br><span class="line">            if (minutes != 0) &#123;</span><br><span class="line">                return s;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return s.replace(minutes + &quot;分&quot;, &quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><code>$days+&quot;天&quot;+$hours+&quot;小时&quot;+$minutes+&quot;分&quot;</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;轻松解决时间差问题</summary>
    
    
    
    <category term="Android开发游记" scheme="https://ymkiux.github.io/categories/Android%E5%BC%80%E5%8F%91%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="android" scheme="https://ymkiux.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>webview隐藏网页元素</title>
    <link href="https://ymkiux.github.io/posts/2020091517/"/>
    <id>https://ymkiux.github.io/posts/2020091517/</id>
    <published>2020-09-15T09:50:00.000Z</published>
    <updated>2025-06-28T02:30:54.038Z</updated>
    
    <content type="html"><![CDATA[<p>更优雅实现webview元素隐藏显示<span id="more"></span></p><h5 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h5><p><code>因为百度开发者账号遗失,所以才想到之前用石墨文档写过类似的内容,整理一下</code></p><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><h6 id="自定义类继承webview"><a href="#自定义类继承webview" class="headerlink" title="自定义类继承webview"></a>自定义类继承webview</h6><p><code>重写onDraw方法</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class H5WebView extends WebView &#123;</span><br><span class="line">    public H5WebView(Context context) &#123;</span><br><span class="line">        super(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public H5WebView(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public H5WebView(Context context, AttributeSet attrs, int defStyleAttr) &#123;</span><br><span class="line">        super(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDraw(Canvas canvas) &#123;</span><br><span class="line">        super.onDraw(canvas);</span><br><span class="line">        if (mOnDrawListener != null) &#123;</span><br><span class="line">            mOnDrawListener.onDrawCallBack();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private OnDrawListener mOnDrawListener;</span><br><span class="line"></span><br><span class="line">    public void setOnDrawListener(OnDrawListener onDrawListener) &#123;</span><br><span class="line">        mOnDrawListener = onDrawListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public interface OnDrawListener &#123;</span><br><span class="line">        public void onDrawCallBack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="定义JavaScript"><a href="#定义JavaScript" class="headerlink" title="定义JavaScript"></a>定义JavaScript</h6><p><code>避免繁琐 封装为函数</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//元素块有id</span><br><span class="line">private fun Hide_id_Elements(string: String) &#123;</span><br><span class="line">        val javascript = (&quot;javascript:function hideId() &#123; &quot;</span><br><span class="line">                + &quot;document.getElementById(\&quot;$string\&quot;).style.display =\&quot;none\&quot;&quot;</span><br><span class="line">                + &quot;&#125;&quot;)</span><br><span class="line">        web_xs_petReleaseAddress.loadUrl(javascript)</span><br><span class="line">        web_xs_petReleaseAddress.loadUrl(&quot;javascript:hideId();&quot;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//元素块只有class</span><br><span class="line">private fun Hide_class_Elements(string: String) &#123;</span><br><span class="line">        val javascript = (&quot;javascript:function hideClass() &#123; &quot;</span><br><span class="line">                + &quot;document.getElementsByClassName(\&quot;$string\&quot;)[0].style.display =\&quot;none\&quot;&quot;</span><br><span class="line">                + &quot;&#125;&quot;)</span><br><span class="line">        web_xs_petReleaseAddress.loadUrl(javascript)</span><br><span class="line">        web_xs_petReleaseAddress.loadUrl(&quot;javascript:hideClass();&quot;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//隐藏方法</span><br><span class="line">private fun hideE() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Hide_id_Elements(&quot;tool-container&quot;)</span><br><span class="line">            Hide_id_Elements(&quot;message-center&quot;)</span><br><span class="line">            Hide_id_Elements(&quot;user-center&quot;)</span><br><span class="line">            Hide_id_Elements(&quot;newuilogo&quot;)</span><br><span class="line">            Hide_class_Elements(&quot;BMap_cpyCtrl BMap_noprint anchorBL&quot;)</span><br><span class="line">            Hide_class_Elements(&quot;mapTypeCard panorama choosedType&quot;)</span><br><span class="line">        &#125; catch (e: Exception) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h6><p><code>web_xs_petReleaseAddress为webview</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">web_xs_petReleaseAddress.setOnDrawListener(H5WebView.OnDrawListener &#123;</span><br><span class="line">    hideE()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p><code>document.getElementsByClassName拿到的是数组并非某一个对象 可从console控制台测试看出</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;更优雅实现webview元素隐藏显示</summary>
    
    
    
    <category term="Android开发游记" scheme="https://ymkiux.github.io/categories/Android%E5%BC%80%E5%8F%91%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="android" scheme="https://ymkiux.github.io/tags/android/"/>
    
    <category term="webview" scheme="https://ymkiux.github.io/tags/webview/"/>
    
  </entry>
  
  <entry>
    <title>上传本地图片到服务器详解</title>
    <link href="https://ymkiux.github.io/posts/2020091113/"/>
    <id>https://ymkiux.github.io/posts/2020091113/</id>
    <published>2020-09-11T05:43:00.000Z</published>
    <updated>2025-06-28T02:30:54.048Z</updated>
    
    <content type="html"><![CDATA[<p>通过思路实现上传服务器逻辑<span id="more"></span></p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><blockquote><p>回调图片path并解码为bitmap<br>将得到的bitmap通过base64格式转化为字符串<br>通过服务器对应接口get/post 参数携带其字符串</p></blockquote><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><h5 id="回调解码"><a href="#回调解码" class="headerlink" title="回调解码"></a>回调解码</h5><blockquote><p>bitmap为解码位图  imgPath为回调path </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">private String imgPath;</span><br><span class="line">private Bitmap bitmap;</span><br><span class="line">public void loadImage() &#123;</span><br><span class="line">  //调用相册中选择图片</span><br><span class="line">  Intent galleryIntent = new Intent(Intent.ACTION_PICK,</span><br><span class="line">  android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);</span><br><span class="line">  startActivityForResult(galleryIntent, RESULT_LOAD_IMG);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> //返回被选择图片结果</span><br><span class="line">  @Override</span><br><span class="line">    protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</span><br><span class="line">        super.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        try &#123;</span><br><span class="line">            if (requestCode == RESULT_LOAD_IMG &amp;&amp; resultCode == RESULT_OK &amp;&amp; null != data) &#123;</span><br><span class="line">                Uri selectedImage = data.getData();</span><br><span class="line">                String[] filePathColumn = &#123;MediaStore.Images.Media.DATA&#125;;</span><br><span class="line">                // 获取游标</span><br><span class="line">                Cursor cursor = getContentResolver().query(selectedImage, filePathColumn, null, null, null);</span><br><span class="line">                cursor.moveToFirst();</span><br><span class="line">                int columnIndex = cursor.getColumnIndex(filePathColumn[0]);</span><br><span class="line">                imgPath = cursor.getString(columnIndex);</span><br><span class="line">                cursor.close();</span><br><span class="line">                imXsFirstImage.setVisibility(View.VISIBLE);</span><br><span class="line">                bitmap = BitmapFactory.decodeFile(imgPath);</span><br><span class="line">                imXsFirstImage.setImageBitmap(bitmap);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                L.t(getResources().getString(R.string.You_havenot_picked_Image));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            L.t(getResources().getString(R.string.Something_went_wrong));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="bitmap与base64互转"><a href="#bitmap与base64互转" class="headerlink" title="bitmap与base64互转"></a>bitmap与base64互转</h5><h6 id="位图转为字符串"><a href="#位图转为字符串" class="headerlink" title="位图转为字符串"></a>位图转为字符串</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 将bitmap转为base64字符串</span><br><span class="line">     * @param bitmap bitmap位图</span><br><span class="line">     * @param quality 80表示压缩掉20%</span><br><span class="line">     * @return base64字符串</span><br><span class="line">     */</span><br><span class="line">    public String TurnBitmapBase(Bitmap bitmap) &#123;</span><br><span class="line">        ByteArrayOutputStream bos = new ByteArrayOutputStream();</span><br><span class="line">        bitmap.compress(Bitmap.CompressFormat.JPEG, 80, bos);</span><br><span class="line">        byte[] bytes = bos.toByteArray();</span><br><span class="line">        return Base64.encodeToString(bytes, Base64.DEFAULT);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="字符串转为位图"><a href="#字符串转为位图" class="headerlink" title="字符串转为位图"></a>字符串转为位图</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 将base64字符串转为bitmap位图</span><br><span class="line">     * @param base_bitmap 服务端回调base64字符串</span><br><span class="line">     * @return bitmap位图</span><br><span class="line">     */</span><br><span class="line">    public Bitmap TurnBaseBitmap(String base_bitmap) &#123;</span><br><span class="line">        byte[] byteIcon = Base64.decode(base_bitmap, Base64.DEFAULT);</span><br><span class="line">        for (int i = 0; i &lt; byteIcon.length; ++i) &#123;</span><br><span class="line">            if (byteIcon[i] &lt; 0) &#123;</span><br><span class="line">                byteIcon[i] += 256;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Bitmap bitmap = BitmapFactory.decodeByteArray(byteIcon, 0, byteIcon.length);</span><br><span class="line">        return bitmap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>​    字符串转为位图:    运用于通过服务器接口将其获取到的值通过其进行转码为位图 便于显示<br>​    位图转为字符串:    运用于将其数据通过接口传值(我这边用的是数据库表存 方便上传之后 客户端还可以显示其内容)</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过思路实现上传服务器逻辑</summary>
    
    
    
    <category term="Android开发游记" scheme="https://ymkiux.github.io/categories/Android%E5%BC%80%E5%8F%91%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="android" scheme="https://ymkiux.github.io/tags/android/"/>
    
    <category term="java" scheme="https://ymkiux.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>无限循环RecyclerView的完美方案</title>
    <link href="https://ymkiux.github.io/posts/2020091016/"/>
    <id>https://ymkiux.github.io/posts/2020091016/</id>
    <published>2020-09-10T08:42:00.000Z</published>
    <updated>2025-06-28T02:30:54.188Z</updated>
    
    <content type="html"><![CDATA[<p>无限循环RecyclerView<span id="more"></span></p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><blockquote><p>当前服务端直播接口数量太少 所以想到这个方法</p></blockquote><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><h5 id="参数取余运算"><a href="#参数取余运算" class="headerlink" title="参数取余运算"></a>参数取余运算</h5><blockquote><p>getItemCount长度无限</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int getItemCount() &#123;</span><br><span class="line">return Integer.MAX_VALUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>onBindViewHolder() 方法里对position参数取余运算</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onBindViewHolder(ViewHolder holder, int position) </span><br><span class="line">&#123;</span><br><span class="line">     int index =  position % liveList.size();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h5><blockquote><p>liveList.size为旧getItemCount方法返回值</p></blockquote><blockquote><p>index为新的position与bean类get对应值</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;无限循环RecyclerView</summary>
    
    
    
    <category term="Android开发游记" scheme="https://ymkiux.github.io/categories/Android%E5%BC%80%E5%8F%91%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="android" scheme="https://ymkiux.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>SensorEventListener接口实现摇一摇功能</title>
    <link href="https://ymkiux.github.io/posts/2019071920/"/>
    <id>https://ymkiux.github.io/posts/2019071920/</id>
    <published>2019-07-19T12:04:00.000Z</published>
    <updated>2025-06-28T02:30:53.989Z</updated>
    
    <content type="html"><![CDATA[<p>更优雅的实现摇一摇功能<span id="more"></span></p><h5 id="定义参数"><a href="#定义参数" class="headerlink" title="定义参数"></a>定义参数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private long lastUpdate = 0;</span><br><span class="line">private float last_x, last_y, last_z;</span><br><span class="line">private static final int SHAKE_THRESHOLD = 600;</span><br></pre></td></tr></table></figure><h5 id="重写重力感应方法"><a href="#重写重力感应方法" class="headerlink" title="重写重力感应方法"></a>重写重力感应方法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onSensorChanged(SensorEvent sensorEvent) &#123;</span><br><span class="line">    Sensor mySensor = sensorEvent.sensor;</span><br><span class="line"></span><br><span class="line">    if (mySensor.getType() == Sensor.TYPE_ACCELEROMETER) &#123;</span><br><span class="line">        float x = sensorEvent.values[0];</span><br><span class="line">        float y = sensorEvent.values[1];</span><br><span class="line">        float z = sensorEvent.values[2];</span><br><span class="line"></span><br><span class="line">        long curTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        if ((curTime - lastUpdate) &gt; 100) &#123;</span><br><span class="line">            long diffTime = (curTime - lastUpdate);</span><br><span class="line">            lastUpdate = curTime;</span><br><span class="line"></span><br><span class="line">            float speed = Math.abs(x + y + z - last_x - last_y - last_z) / diffTime * 10000;</span><br><span class="line"></span><br><span class="line">            if (speed &gt; SHAKE_THRESHOLD) &#123;</span><br><span class="line">                if (isForeground(MainActivity.this, &quot;MainActivity&quot;)) &#123;</span><br><span class="line">                    Intent intent = new Intent(MainActivity.this, AboutActivity.class);</span><br><span class="line">                    startActivity(intent);</span><br><span class="line">                    finish();</span><br><span class="line">                    overridePendingTransition(R.anim.fade_in, R.anim.fade_out);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            last_x = x;</span><br><span class="line">            last_y = y;</span><br><span class="line">            last_z = z;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onAccuracyChanged(Sensor sensor, int i) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="利用抽象类实现接口"><a href="#利用抽象类实现接口" class="headerlink" title="利用抽象类实现接口"></a>利用抽象类实现接口</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SensorManager senSensorManager =(SensorManager)getSystemService(Context.SENSOR_SERVICE);</span><br><span class="line">   Sensor senAccelerometer = senSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);</span><br><span class="line">   senSensorManager.registerListener(this, senAccelerometer, SensorManager.SENSOR_DELAY_NORMAL);</span><br></pre></td></tr></table></figure><h5 id="注意细节"><a href="#注意细节" class="headerlink" title="注意细节"></a>注意细节</h5><ul><li>抽象类<br></li><li>该抽象类接口通过继承子类的implement SensorEventListener来实现</li><li>清单权限</li><li>重力加速度感知权限</li><li>android.hardware.sensor.accelerometer</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;更优雅的实现摇一摇功能</summary>
    
    
    
    <category term="Android开发游记" scheme="https://ymkiux.github.io/categories/Android%E5%BC%80%E5%8F%91%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="android" scheme="https://ymkiux.github.io/tags/android/"/>
    
  </entry>
  
</feed>
